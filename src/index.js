import React from "react";
import ReactDOM from "react-dom";
import { getState } from "jumpstate";

import { Provider } from "react-redux";
import { createBrowserHistory, createHashHistory } from "history";
import { Route, Redirect, Switch } from "react-router-dom";
import { ConnectedRouter as Router } from "react-router-redux";

import UIkit from "uikit";
import Icons from "uikit/dist/js/uikit-icons";
import registerServiceWorker from "./registerServiceWorker";
import Container from "./components/Container";
import Explorer from "./components/Explorer";
import GMGrid from "./components/GMGrid";
import store from "./store";
import SummaryGrid from "./components/SummaryGrid";
import SettingsGrid from "./components/SettingsGrid";
import RouteBar from "./components/RouteBar";
import RouteGrid from "./components/RouteGrid";
import ThreadsGrid from "./components/ThreadsGrid";

// TODO: Refactor routes to resume use of NotFound
import NotFound from "./components/NotFound";

import { getBasename } from "./utils";

// Import the CSS file generated by less, which includes the UIKit css and our custom theme
import "./style/index.css";

// load the UIKit Icon plugin
UIkit.use(Icons);

// Define a base URL for the project if REACT_APP_BASE_URL exists on process.env
// const basename = process.env.REACT_APP_BASE_URL ? `/${process.env.REACT_APP_BASE_URL}` : '/';

// Use browserHistory if available. Otherwise, fallback to hashHistory.

const createHistory = !!(window.history && window.history.pushState)
  ? createBrowserHistory
  : createHashHistory;
export const history = createHistory({ basename: `${getBasename()}` });

ReactDOM.render(
  <Provider store={store}>
    <Router history={history}>
      <main>
        <Route component={Container} path="/" />
        {getState().settings.runtime === "JVM"
          ? <Route exact path="/" render={() => <Redirect to="/summary" />} />
          : <Route exact path="/" render={() => <Redirect to="/explorer" />} />}
        <Switch>
          {getState().settings.runtime === "JVM" &&
            <Route component={SummaryGrid} path="/summary" />}
          {getState().settings.runtime === "JVM" &&
            <Route component={ThreadsGrid} path="/threads" />}
          <Route component={Explorer} path="/explorer" />
          <Route component={SettingsGrid} path="/settings" />
          {getState().settings.runtime === "JVM" &&
            <Route component={RouteBar} path="/route" />}
          <Route component={GMGrid} path="/dashboard/:dashboardName" />
          <Route component={NotFound} path="*" />
        </Switch>
        <Route component={RouteGrid} path="/route/:routeName" />
      </main>
    </Router>
  </Provider>,
  document.getElementById("root")
);
registerServiceWorker();
